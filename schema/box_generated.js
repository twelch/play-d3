// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var VideoEl = VideoEl || {};

/**
 * @constructor
 */
VideoEl.Position = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {VideoEl.Position}
 */
VideoEl.Position.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
VideoEl.Position.prototype.x = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @returns {number}
 */
VideoEl.Position.prototype.y = function() {
  return this.bb.readFloat32(this.bb_pos + 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 * @param {number} y
 * @returns {flatbuffers.Offset}
 */
VideoEl.Position.createPosition = function(builder, x, y) {
  builder.prep(4, 8);
  builder.writeFloat32(y);
  builder.writeFloat32(x);
  return builder.offset();
};

/**
 * @constructor
 */
VideoEl.Size = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {VideoEl.Size}
 */
VideoEl.Size.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
VideoEl.Size.prototype.height = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @returns {number}
 */
VideoEl.Size.prototype.width = function() {
  return this.bb.readFloat32(this.bb_pos + 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} height
 * @param {number} width
 * @returns {flatbuffers.Offset}
 */
VideoEl.Size.createSize = function(builder, height, width) {
  builder.prep(4, 8);
  builder.writeFloat32(width);
  builder.writeFloat32(height);
  return builder.offset();
};

/**
 * @constructor
 */
VideoEl.Box = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {VideoEl.Box}
 */
VideoEl.Box.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {VideoEl.Box=} obj
 * @returns {VideoEl.Box}
 */
VideoEl.Box.getRootAsBox = function(bb, obj) {
  return (obj || new VideoEl.Box).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
VideoEl.Box.prototype.uuid = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {VideoEl.Position=} obj
 * @returns {VideoEl.Position|null}
 */
VideoEl.Box.prototype.Position = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new VideoEl.Position).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {VideoEl.Size=} obj
 * @returns {VideoEl.Size|null}
 */
VideoEl.Box.prototype.Size = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new VideoEl.Size).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
VideoEl.Box.startBox = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} uuidOffset
 */
VideoEl.Box.addUuid = function(builder, uuidOffset) {
  builder.addFieldOffset(0, uuidOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} PositionOffset
 */
VideoEl.Box.addPosition = function(builder, PositionOffset) {
  builder.addFieldStruct(1, PositionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} SizeOffset
 */
VideoEl.Box.addSize = function(builder, SizeOffset) {
  builder.addFieldStruct(2, SizeOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
VideoEl.Box.endBox = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
VideoEl.Box.finishBoxBuffer = function(builder, offset) {
  builder.finish(offset);
};

// Exports for Node.js and RequireJS
this.VideoEl = VideoEl;
